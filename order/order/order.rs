// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/order.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:order.OrderNotificationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OrderNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:order.OrderNotificationRequest.orderId)
    pub orderId: ::std::string::String,
    // @@protoc_insertion_point(field:order.OrderNotificationRequest.customerName)
    pub customerName: ::std::string::String,
    // @@protoc_insertion_point(field:order.OrderNotificationRequest.totalAmount)
    pub totalAmount: i32,
    // @@protoc_insertion_point(field:order.OrderNotificationRequest.items)
    pub items: ::std::vec::Vec<OrderItem>,
    // special fields
    // @@protoc_insertion_point(special_field:order.OrderNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OrderNotificationRequest {
    fn default() -> &'a OrderNotificationRequest {
        <OrderNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl OrderNotificationRequest {
    pub fn new() -> OrderNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "orderId",
            |m: &OrderNotificationRequest| { &m.orderId },
            |m: &mut OrderNotificationRequest| { &mut m.orderId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "customerName",
            |m: &OrderNotificationRequest| { &m.customerName },
            |m: &mut OrderNotificationRequest| { &mut m.customerName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "totalAmount",
            |m: &OrderNotificationRequest| { &m.totalAmount },
            |m: &mut OrderNotificationRequest| { &mut m.totalAmount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &OrderNotificationRequest| { &m.items },
            |m: &mut OrderNotificationRequest| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OrderNotificationRequest>(
            "OrderNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OrderNotificationRequest {
    const NAME: &'static str = "OrderNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.orderId = is.read_string()?;
                },
                18 => {
                    self.customerName = is.read_string()?;
                },
                24 => {
                    self.totalAmount = is.read_int32()?;
                },
                34 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.orderId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.orderId);
        }
        if !self.customerName.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.customerName);
        }
        if self.totalAmount != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.totalAmount);
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.orderId.is_empty() {
            os.write_string(1, &self.orderId)?;
        }
        if !self.customerName.is_empty() {
            os.write_string(2, &self.customerName)?;
        }
        if self.totalAmount != 0 {
            os.write_int32(3, self.totalAmount)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OrderNotificationRequest {
        OrderNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.orderId.clear();
        self.customerName.clear();
        self.totalAmount = 0;
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OrderNotificationRequest {
        static instance: OrderNotificationRequest = OrderNotificationRequest {
            orderId: ::std::string::String::new(),
            customerName: ::std::string::String::new(),
            totalAmount: 0,
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OrderNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OrderNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OrderNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrderNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:order.OrderNotificationResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OrderNotificationResponse {
    // message fields
    // @@protoc_insertion_point(field:order.OrderNotificationResponse.status)
    pub status: i32,
    // @@protoc_insertion_point(field:order.OrderNotificationResponse.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:order.OrderNotificationResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OrderNotificationResponse {
    fn default() -> &'a OrderNotificationResponse {
        <OrderNotificationResponse as ::protobuf::Message>::default_instance()
    }
}

impl OrderNotificationResponse {
    pub fn new() -> OrderNotificationResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &OrderNotificationResponse| { &m.status },
            |m: &mut OrderNotificationResponse| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &OrderNotificationResponse| { &m.message },
            |m: &mut OrderNotificationResponse| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OrderNotificationResponse>(
            "OrderNotificationResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OrderNotificationResponse {
    const NAME: &'static str = "OrderNotificationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_int32()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.status);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != 0 {
            os.write_int32(1, self.status)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OrderNotificationResponse {
        OrderNotificationResponse::new()
    }

    fn clear(&mut self) {
        self.status = 0;
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OrderNotificationResponse {
        static instance: OrderNotificationResponse = OrderNotificationResponse {
            status: 0,
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OrderNotificationResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OrderNotificationResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OrderNotificationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrderNotificationResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:order.OrderItem)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OrderItem {
    // message fields
    // @@protoc_insertion_point(field:order.OrderItem.productId)
    pub productId: ::std::string::String,
    // @@protoc_insertion_point(field:order.OrderItem.productName)
    pub productName: ::std::string::String,
    // @@protoc_insertion_point(field:order.OrderItem.quantity)
    pub quantity: i32,
    // @@protoc_insertion_point(field:order.OrderItem.price)
    pub price: i32,
    // special fields
    // @@protoc_insertion_point(special_field:order.OrderItem.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OrderItem {
    fn default() -> &'a OrderItem {
        <OrderItem as ::protobuf::Message>::default_instance()
    }
}

impl OrderItem {
    pub fn new() -> OrderItem {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "productId",
            |m: &OrderItem| { &m.productId },
            |m: &mut OrderItem| { &mut m.productId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "productName",
            |m: &OrderItem| { &m.productName },
            |m: &mut OrderItem| { &mut m.productName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quantity",
            |m: &OrderItem| { &m.quantity },
            |m: &mut OrderItem| { &mut m.quantity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price",
            |m: &OrderItem| { &m.price },
            |m: &mut OrderItem| { &mut m.price },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OrderItem>(
            "OrderItem",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OrderItem {
    const NAME: &'static str = "OrderItem";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.productId = is.read_string()?;
                },
                18 => {
                    self.productName = is.read_string()?;
                },
                24 => {
                    self.quantity = is.read_int32()?;
                },
                32 => {
                    self.price = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.productId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.productId);
        }
        if !self.productName.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.productName);
        }
        if self.quantity != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.quantity);
        }
        if self.price != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.price);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.productId.is_empty() {
            os.write_string(1, &self.productId)?;
        }
        if !self.productName.is_empty() {
            os.write_string(2, &self.productName)?;
        }
        if self.quantity != 0 {
            os.write_int32(3, self.quantity)?;
        }
        if self.price != 0 {
            os.write_int32(4, self.price)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OrderItem {
        OrderItem::new()
    }

    fn clear(&mut self) {
        self.productId.clear();
        self.productName.clear();
        self.quantity = 0;
        self.price = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OrderItem {
        static instance: OrderItem = OrderItem {
            productId: ::std::string::String::new(),
            productName: ::std::string::String::new(),
            quantity: 0,
            price: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OrderItem {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OrderItem").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OrderItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrderItem {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11proto/order.proto\x12\x05order\"\xa2\x01\n\x18OrderNotificationReq\
    uest\x12\x18\n\x07orderId\x18\x01\x20\x01(\tR\x07orderId\x12\"\n\x0ccust\
    omerName\x18\x02\x20\x01(\tR\x0ccustomerName\x12\x20\n\x0btotalAmount\
    \x18\x03\x20\x01(\x05R\x0btotalAmount\x12&\n\x05items\x18\x04\x20\x03(\
    \x0b2\x10.order.OrderItemR\x05items\"M\n\x19OrderNotificationResponse\
    \x12\x16\n\x06status\x18\x01\x20\x01(\x05R\x06status\x12\x18\n\x07messag\
    e\x18\x02\x20\x01(\tR\x07message\"}\n\tOrderItem\x12\x1c\n\tproductId\
    \x18\x01\x20\x01(\tR\tproductId\x12\x20\n\x0bproductName\x18\x02\x20\x01\
    (\tR\x0bproductName\x12\x1a\n\x08quantity\x18\x03\x20\x01(\x05R\x08quant\
    ity\x12\x14\n\x05price\x18\x04\x20\x01(\x05R\x05price2r\n\x18Notificatio\
    nOrderService\x12V\n\x11OrderNotification\x12\x1f.order.OrderNotificatio\
    nRequest\x1a\x20.order.OrderNotificationResponseB\x1aZ\x18notification/p\
    roto/orderJ\xfc\x05\n\x06\x12\x04\0\0\x1a\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x0e\n\x08\n\x01\x08\x12\x03\x03\0/\
    \n\t\n\x02\x08\x0b\x12\x03\x03\0/\n\n\n\x02\x06\0\x12\x04\x05\0\x07\x01\
    \n\n\n\x03\x06\0\x01\x12\x03\x05\x08\x20\n\x0b\n\x04\x06\0\x02\0\x12\x03\
    \x06\x02W\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x06\x06\x17\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x06\x191\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x06<U\n\n\n\x02\x04\0\x12\x04\t\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\t\
    \x08\x20\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x02\x15\n\x0c\n\x05\x04\0\x02\
    \0\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\t\x10\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x13\x14\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x0b\x02\x1a\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\t\x15\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x0b\x18\x19\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0c\x02\x18\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0c\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x0c\x08\x13\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0c\
    \x16\x17\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\x02\x1f\n\x0c\n\x05\x04\0\
    \x02\x03\x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\r\x0b\
    \x14\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\r\x15\x1a\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\r\x1d\x1e\n\n\n\x02\x04\x01\x12\x04\x10\0\x13\x01\n\
    \n\n\x03\x04\x01\x01\x12\x03\x10\x08!\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x11\x02\x13\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x11\x02\x07\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x11\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x11\x11\x12\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x12\x02\x15\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x12\t\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x12\x13\x14\n\n\n\x02\x04\x02\x12\x04\x15\0\x1a\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\x15\x08\x11\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x16\x02\x17\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x16\t\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x16\x15\
    \x16\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x17\x02\x19\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\
    \x17\t\x14\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x17\x17\x18\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03\x18\x02\x15\n\x0c\n\x05\x04\x02\x02\x02\x05\
    \x12\x03\x18\x02\x07\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x18\x08\x10\
    \n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x18\x13\x14\n\x0b\n\x04\x04\x02\
    \x02\x03\x12\x03\x19\x02\x12\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x19\
    \x02\x07\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x19\x08\r\n\x0c\n\x05\
    \x04\x02\x02\x03\x03\x12\x03\x19\x10\x11b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(OrderNotificationRequest::generated_message_descriptor_data());
            messages.push(OrderNotificationResponse::generated_message_descriptor_data());
            messages.push(OrderItem::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
