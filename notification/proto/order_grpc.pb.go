// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationOrderServiceClient is the client API for NotificationOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationOrderServiceClient interface {
	OrderNotification(ctx context.Context, in *OrderNotificationRequest, opts ...grpc.CallOption) (*OrderNotificationResponse, error)
}

type notificationOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationOrderServiceClient(cc grpc.ClientConnInterface) NotificationOrderServiceClient {
	return &notificationOrderServiceClient{cc}
}

func (c *notificationOrderServiceClient) OrderNotification(ctx context.Context, in *OrderNotificationRequest, opts ...grpc.CallOption) (*OrderNotificationResponse, error) {
	out := new(OrderNotificationResponse)
	err := c.cc.Invoke(ctx, "/order.NotificationOrderService/OrderNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationOrderServiceServer is the server API for NotificationOrderService service.
// All implementations must embed UnimplementedNotificationOrderServiceServer
// for forward compatibility
type NotificationOrderServiceServer interface {
	OrderNotification(context.Context, *OrderNotificationRequest) (*OrderNotificationResponse, error)
	mustEmbedUnimplementedNotificationOrderServiceServer()
}

// UnimplementedNotificationOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationOrderServiceServer struct {
}

func (UnimplementedNotificationOrderServiceServer) OrderNotification(context.Context, *OrderNotificationRequest) (*OrderNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderNotification not implemented")
}
func (UnimplementedNotificationOrderServiceServer) mustEmbedUnimplementedNotificationOrderServiceServer() {
}

// UnsafeNotificationOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationOrderServiceServer will
// result in compilation errors.
type UnsafeNotificationOrderServiceServer interface {
	mustEmbedUnimplementedNotificationOrderServiceServer()
}

func RegisterNotificationOrderServiceServer(s grpc.ServiceRegistrar, srv NotificationOrderServiceServer) {
	s.RegisterService(&NotificationOrderService_ServiceDesc, srv)
}

func _NotificationOrderService_OrderNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationOrderServiceServer).OrderNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.NotificationOrderService/OrderNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationOrderServiceServer).OrderNotification(ctx, req.(*OrderNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationOrderService_ServiceDesc is the grpc.ServiceDesc for NotificationOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.NotificationOrderService",
	HandlerType: (*NotificationOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderNotification",
			Handler:    _NotificationOrderService_OrderNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/order.proto",
}
